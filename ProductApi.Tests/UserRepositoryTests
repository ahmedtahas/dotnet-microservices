using Xunit;
using Moq;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using ProductApi.Repositories;
using ProductApi.Data;
using ProductApi.Models;
using System.Diagnostics;

public class UserRepositoryTests
{
    private readonly UserRepository _userRepository;
    private readonly Mock<DbSet<User>> _mockSet;
    private readonly Mock<ApplicationDbContext> _mockContext;
    private readonly ITestOutputHelper _output;

    public UserRepositoryTests(ITestOutputHelper output)
    {
        _output = output;
        _mockSet = new Mock<DbSet<User>>();
        _mockContext = new Mock<ApplicationDbContext>();
        _mockContext.Setup(m => m.Users).Returns(_mockSet.Object);
        _userRepository = new UserRepository(_mockContext.Object);
    }

    [Fact]
    public async Task DeleteUser_UserExists_ReturnsDeletedUser()
    {
        // Arrange
        var testUser = new User { Id = 1, Name = "Test User" };
        _mockSet.Setup(m => m.FindAsync(1)).Returns(new ValueTask<User>(testUser));

        // Act
        var returnedUser = await _userRepository.DeleteUser(1);

        // Assert
        Assert.Equal(testUser, returnedUser);
        _mockSet.Verify(m => m.Remove(testUser), Times.Once());
        _mockContext.Verify(m => m.SaveChangesAsync(default), Times.Once());

    }

    [Fact]
    public async Task DeleteUser_UserDoesNotExist_ThrowsException()
    {
        // Arrange
        _mockSet.Setup(m => m.FindAsync(1)).Returns(new ValueTask<User>((User)null));

        // Act & Assert
        await Assert.ThrowsAsync<Exception>(() => _userRepository.DeleteUser(1));
    }
}